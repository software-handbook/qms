<beans
    xmlns:mvc="http://www.springframework.org/schema/mvc" 
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	
	<!-- Enables the Spring MVC @Controller programming model -->
    <mvc:annotation-driven />

    <context:annotation-config/>
    <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
    <mvc:resources mapping="/resources/**" location="/resources/" />
    
    <!-- Option 1 for ViewResolver -->
    <!-- This helps in mapping the logical view names to directly view files under a certain pre-configured directory -->
<!--     <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> -->
<!--         <property name="prefix" value="views/" /> -->
<!--         <property name="suffix" value=".jsp" /> -->
<!--     </bean> -->
    
    <!-- Option 2 for ViewResolver -->
   <!-- New bean added for using Spring tiles -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.tiles3.TilesViewResolver"/>

    <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
      <property name="definitions">
        <list>
          <value>/WEB-INF/views/layouts/layouts.xml</value>
          <value>/WEB-INF/views/**/views.xml</value>
        </list>
      </property>
    </bean>
	
<!--     <context:component-scan base-package="m.k.s.sakaiapp.upload" /> -->
	<bean name="/home"
		class="m.k.s.sakaiapp.upload.controller.HomeController">
		<property name="sakaiProxy" ref="m.k.s.sakaiapp.upload.logic.SakaiProxy"/>
	</bean>
</beans>
